export const mockData = [
    { id: 1, title: "Java Arrays", description: "Learn about arrays in Java", difficulty: "Intermediate", content: "Arrays in Java are used to store multiple values in a single variable. This tutorial covers how to declare, initialize, and access arrays." },
    { id: 2, title: "Java Basics", description: "Introduction to Java", difficulty: "Beginner", content: "This tutorial introduces the basic concepts of Java, including syntax, data types, and basic operations." },
    { id: 3, title: "Java OOP Concepts", description: "Learn about Object-Oriented Programming in Java", difficulty: "Advanced", content: "Object-Oriented Programming (OOP) in Java focuses on using objects and classes. This tutorial covers key OOP principles like inheritance, encapsulation, and polymorphism." },
    { id: 4, title: "Java Variables", description: "Learn about variables in Java", difficulty: "Beginner", content: "Variables in Java are used to store data. This tutorial explains how to declare, initialize, and use variables." },
    { id: 5, title: "Java Control Flow", description: "Learn about control flow in Java", difficulty: "Intermediate", content: "Control flow statements in Java determine the order in which statements are executed. This tutorial covers if-else, switch-case, loops, and more." },
    { id: 6, title: "Java Methods", description: "Learn about methods in Java", difficulty: "Beginner", content: "Methods in Java are blocks of code that perform a specific task. This tutorial explains how to declare, call, and use methods." },
    { id: 7, title: "Java Classes and Objects", description: "Learn about classes and objects in Java", difficulty: "Intermediate", content: "Classes and objects are the core of Java's OOP approach. This tutorial covers how to create and use classes and objects." },
    { id: 8, title: "Java Inheritance", description: "Learn about inheritance in Java", difficulty: "Advanced", content: "Inheritance allows a class to inherit fields and methods from another class. This tutorial explains how inheritance works in Java." },
    { id: 9, title: "Java Polymorphism", description: "Learn about polymorphism in Java", difficulty: "Advanced", content: "Polymorphism in Java allows objects to be treated as instances of their parent class. This tutorial covers the concept and its implementation." },
    { id: 10, title: "Java Interfaces", description: "Learn about interfaces in Java", difficulty: "Intermediate", content: "Interfaces in Java are abstract types used to specify behavior. This tutorial explains how to define and implement interfaces." },
    { id: 11, title: "Java Abstract Classes", description: "Learn about abstract classes in Java", difficulty: "Intermediate", content: "Abstract classes in Java cannot be instantiated and are used to declare common characteristics. This tutorial covers how to use abstract classes." },
    { id: 12, title: "Java Exception Handling", description: "Learn about exception handling in Java", difficulty: "Advanced", content: "Exception handling in Java is used to handle runtime errors. This tutorial explains try-catch blocks, throw, throws, and custom exceptions." },
    { id: 13, title: "Java File I/O", description: "Learn about file input/output in Java", difficulty: "Advanced", content: "File I/O in Java allows you to read from and write to files. This tutorial covers the basics of file handling using Java." },
    { id: 14, title: "Java Collections Framework", description: "Learn about the collections framework in Java", difficulty: "Intermediate", content: "The Java Collections Framework provides a set of classes and interfaces for managing groups of objects. This tutorial explains lists, sets, maps, and more." },
    { id: 15, title: "Java Generics", description: "Learn about generics in Java", difficulty: "Advanced", content: "Generics in Java allow you to write flexible and reusable code. This tutorial covers how to use generics with classes and methods." },
    { id: 16, title: "Java Lambda Expressions", description: "Learn about lambda expressions in Java", difficulty: "Advanced", content: "Lambda expressions in Java provide a clear and concise way to represent one method interface. This tutorial explains how to use lambda expressions." },
    { id: 17, title: "Java Streams API", description: "Learn about the streams API in Java", difficulty: "Advanced", content: "The Streams API in Java provides a functional approach to processing sequences of elements. This tutorial covers the basics of using streams." },
    { id: 18, title: "Java Multithreading", description: "Learn about multithreading in Java", difficulty: "Advanced", content: "Multithreading in Java allows concurrent execution of two or more threads. This tutorial explains how to create and manage threads." },
    { id: 19, title: "Java Concurrency", description: "Learn about concurrency in Java", difficulty: "Advanced", content: "Concurrency in Java is the ability to run several programs or threads simultaneously. This tutorial covers synchronization, locks, and concurrent collections." },
    { id: 20, title: "Java Networking", description: "Learn about networking in Java", difficulty: "Intermediate", content: "Networking in Java allows you to connect to other computers to exchange data. This tutorial explains sockets, URLs, and network protocols." },
    { id: 21, title: "Java GUI Programming", description: "Learn about GUI programming in Java", difficulty: "Intermediate", content: "GUI programming in Java involves creating graphical user interfaces. This tutorial covers the basics of using Java's GUI libraries." },
    { id: 22, title: "Java Swing", description: "Learn about Swing in Java", difficulty: "Advanced", content: "Swing in Java is a GUI toolkit for creating desktop applications. This tutorial explains how to create and manage Swing components." },
    { id: 23, title: "JavaFX", description: "Learn about JavaFX", difficulty: "Advanced", content: "JavaFX is a software platform for creating rich internet applications. This tutorial covers the basics of using JavaFX for GUI development." },
    { id: 24, title: "Java JDBC", description: "Learn about JDBC in Java", difficulty: "Intermediate", content: "JDBC (Java Database Connectivity) allows Java applications to interact with databases. This tutorial explains how to use JDBC for database operations." },
    { id: 25, title: "Java Annotations", description: "Learn about annotations in Java", difficulty: "Advanced", content: "Annotations in Java provide metadata about the program. This tutorial explains how to use and create annotations." },
    { id: 26, title: "Java Reflection", description: "Learn about reflection in Java", difficulty: "Advanced", content: "Reflection in Java allows you to inspect and manipulate classes at runtime. This tutorial covers the basics of using reflection." },
    { id: 27, title: "Java Serialization", description: "Learn about serialization in Java", difficulty: "Intermediate", content: "Serialization in Java is the process of converting an object into a byte stream. This tutorial explains how to serialize and deserialize objects." },
    { id: 28, title: "Java RMI", description: "Learn about Remote Method Invocation (RMI) in Java", difficulty: "Advanced", content: "RMI in Java allows objects to invoke methods on remote objects. This tutorial covers the basics of using RMI." },
    { id: 29, title: "Java Design Patterns", description: "Learn about design patterns in Java", difficulty: "Advanced", content: "Design patterns in Java are standard solutions to common problems. This tutorial explains various design patterns and their implementation." },
    { id: 30, title: "Java Best Practices", description: "Learn about best practices in Java", difficulty: "Intermediate", content: "Best practices in Java help you write efficient and maintainable code. This tutorial covers coding standards, performance tips, and more." }
];
